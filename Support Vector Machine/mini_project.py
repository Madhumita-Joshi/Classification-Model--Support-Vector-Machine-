# -*- coding: utf-8 -*-
"""Mini Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MCyf7chP9HLCmKJMRqjG7zESJJ3cOwOB
"""

#Mini Project-SVM

import pandas as pd                                          # Used for dataframes
from sklearn.model_selection import train_test_split         # To split data into training and testing
from sklearn.svm import SVC                                  # To make the Support Vector Machine model
import seaborn as sn                                         # To display heatmap
from sklearn.metrics import confusion_matrix                 # To obtain confusion matrix
from sklearn.metrics import classification_report            # To obtain summary of the model

# Samiksha Shetty 
data = pd.read_csv("breast_cancer.csv") # Reading the csv file
data.shape                              # To find shape of the dataset

data.head()                             # Printing the top 5 rows of the data

data.drop("Unnamed: 32",axis=1,inplace=True)  #remove Unnamed:32 column
data.drop("id",axis=1,inplace=True)           #remove id column
X = data.drop('diagnosis', axis=1)            #taking all input variables in variable X
y = data['diagnosis']                         #taking the output variable in y
data.head()                                   #again displaying the cleaned data

#Linear Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=5) #dividing the data into train and test data
svclassifier1 = SVC(kernel='linear')                                                        #Creating the SVC model using the polynomial kernel
svclassifier1.fit(X_train, y_train)                                                         #Fit the model with training data

y_pred = svclassifier1.predict(X_test)                                                      #Using the predict function
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred)) 

# Precision = TruePositives / (TruePositives + FalsePositives)
# Recall = TruePositives / (TruePositives + FalseNegatives)

#Linear Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state=5) #dividing the data into train and test data
svclassifier11 = SVC(kernel='linear')   #Creating the SVC model using the polynomial kernel
svclassifier11.fit(X_train, y_train)    #Fit the model with training data

y_pred = svclassifier11.predict(X_test) #Using the predict function
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))  #printing the confusion matrix
print(classification_report(y_test,y_pred))
confusion_matrix1 = pd.crosstab(y_test,y_pred,rownames=['Actual'],colnames=['Predicted'])
sn.heatmap(confusion_matrix1, annot=True) #Display the heatmap

# Polynomial Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.20, random_state=5) #dividing the data into train and test data

svclassifier = SVC(kernel='poly') #Creating the SVC model using the polynomial kernel
svclassifier.fit(X_train, y_train)  #Fit the model with training data

y_pred = svclassifier.predict(X_test) #Using the predict function
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred)) #printing the confusion matrix
print(classification_report(y_test,y_pred))

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 5) #dividing the data into train and test data

svclassifier2 = SVC(kernel='poly') #Creating the SVC model using the polynomial kernel
svclassifier2.fit(X_train, y_train)  #Fit the model with training data

y_pred = svclassifier2.predict(X_test) #Using the predict function
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))  #printing the confusion matrix
print(classification_report(y_test,y_pred))

# Madhumita Joshi
data1 = pd.read_csv("Wine Type.csv")

data1.shape

data1.head()

X = data1.drop('Wine Type', axis=1)
y = data1['Wine Type']

# Linear Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30,random_state=4)

svclassifier = SVC(kernel='linear')
svclassifier.fit(X_train, y_train)

y_pred = svclassifier.predict(X_test)
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred))

# Linear Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2,random_state=4)

svclassifier = SVC(kernel='linear')
svclassifier.fit(X_train, y_train)

y_pred = svclassifier.predict(X_test)
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred))

confusion_matrix1 = pd.crosstab(y_test,y_pred,rownames=['Actual'],colnames=['Predicted'])

sn.heatmap(confusion_matrix1, annot=True)

# Polynomial Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30,random_state=3)

svclassifier = SVC(kernel='poly')
svclassifier.fit(X_train, y_train)

y_pred = svclassifier.predict(X_test)
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred))

# Polynomial Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25,random_state=3)

svclassifier = SVC(kernel='poly')
svclassifier.fit(X_train, y_train)

y_pred = svclassifier.predict(X_test)
print("Confusion Matrix")
print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred))

#  Saakshi Yadav

data3 = pd.read_csv("gender_voice.csv") #Reading the csv file
print(data3.shape) #Finding the shape of dataset
data3.head()       #Displaying the top 5 rows of the data

X = data3.drop("label", axis=1) #taking all input attributes in variable x
y = data3['label'] #taking output attribute in variable y

#Linear Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=4) #Dividing the data into train and test data

svclassifier = SVC(kernel='linear') #Creating SVC model using linear kernel
svclassifier.fit(X_train, y_train) #Fit the model with training data

y_pred = svclassifier.predict(X_test) #using the predict function
print('Confusion Matrix')
print(confusion_matrix(y_test,y_pred)) #Printing confusion matrix
print()
print(classification_report(y_test,y_pred))

confusion_matrix1 = pd.crosstab(y_test,y_pred,rownames=['Actual'],colnames=['Predicted'])

sn.heatmap(confusion_matrix1, annot=True) #Displaying the heatmap

#Linear Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.35, random_state=4) #Dividing the data into train and test data

svclassifier = SVC(kernel='linear') #Creating SVC model using linear kernel
svclassifier.fit(X_train, y_train) #Fit the model with training data

y_pred = svclassifier.predict(X_test) #using the predict function
print('Confusion Matrix')
print(confusion_matrix(y_test,y_pred)) #Printing confusion matrix
print()
print(classification_report(y_test,y_pred))

#Polynomial Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=4) #Dividing the data into train and test data

svclassifier = SVC(kernel='poly') #Creating SVC model using linear kernel
svclassifier.fit(X_train, y_train) #Fit the model with training data

y_pred = svclassifier.predict(X_test) #using the predict function
print('Confusion Matrix')
print(confusion_matrix(y_test,y_pred)) #Printing confusion matrix
print()
print(classification_report(y_test,y_pred))

#Polynomial Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.35, random_state=4) #Dividing the data into train and test data

svclassifier = SVC(kernel='poly') #Creating SVC model using linear kernel
svclassifier.fit(X_train, y_train) #Fit the model with training data

y_pred = svclassifier.predict(X_test) #using the predict function
print('Confusion Matrix')
print(confusion_matrix(y_test,y_pred)) #Printing confusion matrix
print()
print(classification_report(y_test,y_pred))

# Sonakshi Darak

data4 = pd.read_csv("heart.csv") #Reading the csv file
print(data4.shape)  #to find shape of the dataset
data4.head() #printing the top 5 rows of the data

X = data4.drop("target", axis=1) #taking all input variables in variable X
y = data4['target']              #taking the output variable in y

#Linear Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.30, random_state=5) #dividing the data into train and test data
svclassifier1 = SVC(kernel='linear') #Creating the SVC model using the linear kernel
svclassifier1.fit(X_train, y_train)  #Fit the model with training data

y_pred = svclassifier1.predict(X_test) #Using the predict function
print('Confusion Matrix')
print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred)) 

confusion_matrix1 = pd.crosstab(y_test,y_pred,rownames=['Actual'],colnames=['Predicted'])
sn.heatmap(confusion_matrix1, annot=True) #Display the heatmap

#Linear Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=5) #dividing the data into train and test data
svclassifier1 = SVC(kernel='linear') #Creating the SVC model using the linear kernel
svclassifier1.fit(X_train, y_train)  #Fit the model with training data

y_pred = svclassifier1.predict(X_test) #Using the predict function
print('Confusion Matrix')
print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred))

#Polynomial Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state=5) #dividing the data into train and test data
svclassifier1 = SVC(kernel='poly') #Creating the SVC model using the polynomial kernel
svclassifier1.fit(X_train, y_train)  #Fit the model with training data

y_pred = svclassifier1.predict(X_test) #Using the predict function
print('Confusion Matrix')
print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred))

#Polynomial Kernel
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state=5) #dividing the data into train and test data
svclassifier1 = SVC(kernel='poly') #Creating the SVC model using the polynomial kernel
svclassifier1.fit(X_train, y_train)  #Fit the model with training data

y_pred = svclassifier1.predict(X_test) #Using the predict function
print('Confusion Matrix')
print(confusion_matrix(y_test,y_pred))
print(classification_report(y_test,y_pred))